// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;
using Rest;

namespace Foundations
{
    public partial class AcceptedResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("statusCode");
            writer.WriteNumberValue(StatusCode);
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id");
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(Status))
            {
                if (Status != null)
                {
                    writer.WritePropertyName("status");
                    writer.WriteStringValue(Status.Value.ToString());
                }
                else
                {
                    writer.WriteNull("status");
                }
            }
            if (Optional.IsDefined(Error))
            {
                writer.WritePropertyName("error");
                writer.WriteObjectValue(Error);
            }
            if (Optional.IsDefined(OperationLocation))
            {
                writer.WritePropertyName("operationLocation");
                writer.WriteObjectValue(OperationLocation);
            }
            writer.WriteEndObject();
        }

        internal static AcceptedResponse DeserializeAcceptedResponse(JsonElement element)
        {
            int statusCode = default;
            Optional<string> id = default;
            Optional<OperationState?> status = default;
            Optional<Error> error = default;
            Optional<ResourceLocation> operationLocation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("statusCode"))
                {
                    statusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        status = null;
                        continue;
                    }
                    status = new OperationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("error"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    error = Error.DeserializeError(property.Value);
                    continue;
                }
                if (property.NameEquals("operationLocation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    operationLocation = ResourceLocation.DeserializeResourceLocation(property.Value);
                    continue;
                }
            }
            return new AcceptedResponse(statusCode, id, Optional.ToNullable(status), error, operationLocation);
        }

        internal RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }

        internal static AcceptedResponse FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAcceptedResponse(document.RootElement);
        }
    }
}
