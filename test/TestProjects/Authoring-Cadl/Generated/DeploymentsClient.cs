// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Authoring;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Foundations;

namespace Azure.Language.Authoring
{
    // Data plane generated client. The Deployments service client.
    /// <summary> The Deployments service client. </summary>
    public partial class DeploymentsClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DeploymentsClient for mocking. </summary>
        protected DeploymentsClient()
        {
        }

        /// <summary> Initializes a new instance of DeploymentsClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public DeploymentsClient(Uri endpoint) : this(endpoint, new AuthoringClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DeploymentsClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public DeploymentsClient(Uri endpoint, AuthoringClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthoringClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Gets the details of a deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<ResourceOkResponse>> GetDeploymentValueAsync(string projectName, string deploymentName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetDeploymentAsync(projectName, deploymentName, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<ResourceOkResponse> GetDeploymentValue(string projectName, string deploymentName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.GetDeploymentValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetDeployment(projectName, deploymentName, apiVersion, context);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDeploymentAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = await client.GetDeploymentAsync("<projectName>", "<deploymentName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeploymentAsync(string projectName, string deploymentName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.GetDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentRequest(projectName, deploymentName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDeployment with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = client.GetDeployment("<projectName>", "<deploymentName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeployment(string projectName, string deploymentName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.GetDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentRequest(projectName, deploymentName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new deployment or replaces an existing one. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<object>> DeployProjectValueAsync(string projectName, string deploymentName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeployProjectValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await DeployProjectAsync(projectName, deploymentName, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(object.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new deployment or replaces an existing one. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<object> DeployProjectValue(string projectName, string deploymentName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeployProjectValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = DeployProject(projectName, deploymentName, apiVersion, context);
                return Response.FromValue(object.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new deployment or replaces an existing one. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeployProjectAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = await client.DeployProjectAsync("<projectName>", "<deploymentName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeployProjectAsync(string projectName, string deploymentName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeployProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeployProjectRequest(projectName, deploymentName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new deployment or replaces an existing one. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeployProject with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = client.DeployProject("<projectName>", "<deploymentName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeployProject(string projectName, string deploymentName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeployProject");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeployProjectRequest(projectName, deploymentName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<AcceptedResponse>> DeleteDeploymentValueAsync(string projectName, string deploymentName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeleteDeploymentValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await DeleteDeploymentAsync(projectName, deploymentName, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(AcceptedResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<AcceptedResponse> DeleteDeploymentValue(string projectName, string deploymentName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeleteDeploymentValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = DeleteDeployment(projectName, deploymentName, apiVersion, context);
                return Response.FromValue(AcceptedResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteDeploymentAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = await client.DeleteDeploymentAsync("<projectName>", "<deploymentName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AcceptedResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   id: string, # Optional.
        ///   status: &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        ///   operationLocation: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteDeploymentAsync(string projectName, string deploymentName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeleteDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDeploymentRequest(projectName, deploymentName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project deployment. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteDeployment with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = client.DeleteDeployment("<projectName>", "<deploymentName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AcceptedResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   id: string, # Optional.
        ///   status: &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        ///   operationLocation: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteDeployment(string projectName, string deploymentName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.DeleteDeployment");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteDeploymentRequest(projectName, deploymentName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing deployments. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<ResourceOkResponse>> ListValueAsync(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.ListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ListAsync(projectName, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing deployments. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<ResourceOkResponse> ListValue(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.ListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = List(projectName, apiVersion, context);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing deployments. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ListAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = await client.ListAsync("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ListAsync(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.List");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListRequest(projectName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing deployments. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call List with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// Response response = client.List("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response List(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.List");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListRequest(projectName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Swaps two existing deployments with each other. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="body"> The body schema of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="body"/> is null. </exception>
        public virtual async Task<Response> SwapDeploymentsAsync(string projectName, string apiVersion, SwapDeploymentsOptions body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await SwapDeploymentsAsync(projectName, apiVersion, body.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Swaps two existing deployments with each other. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="body"> The body schema of the operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="body"/> is null. </exception>
        public virtual Response SwapDeployments(string projectName, string apiVersion, SwapDeploymentsOptions body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = SwapDeployments(projectName, apiVersion, body.ToRequestContent(), context);
            return response;
        }

        /// <summary> Swaps two existing deployments with each other. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SwapDeploymentsAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// var data = new {
        ///     firstDeploymentName = "<firstDeploymentName>",
        ///     secondDeploymentName = "<secondDeploymentName>",
        /// };
        /// 
        /// Response response = await client.SwapDeploymentsAsync("<projectName>", "<apiVersion>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SwapDeploymentsOptions</c>:
        /// <code>{
        ///   firstDeploymentName: string, # Required.
        ///   secondDeploymentName: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> SwapDeploymentsAsync(string projectName, string apiVersion, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.SwapDeployments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSwapDeploymentsRequest(projectName, apiVersion, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Swaps two existing deployments with each other. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call SwapDeployments with required parameters and request content.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new DeploymentsClient(endpoint);
        /// 
        /// var data = new {
        ///     firstDeploymentName = "<firstDeploymentName>",
        ///     secondDeploymentName = "<secondDeploymentName>",
        /// };
        /// 
        /// Response response = client.SwapDeployments("<projectName>", "<apiVersion>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SwapDeploymentsOptions</c>:
        /// <code>{
        ///   firstDeploymentName: string, # Required.
        ///   secondDeploymentName: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response SwapDeployments(string projectName, string apiVersion, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DeploymentsClient.SwapDeployments");
            scope.Start();
            try
            {
                using HttpMessage message = CreateSwapDeploymentsRequest(projectName, apiVersion, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetDeploymentRequest(string projectName, string deploymentName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentName, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateDeployProjectRequest(string projectName, string deploymentName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentName, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateDeleteDeploymentRequest(string projectName, string deploymentName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentName, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateListRequest(string projectName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateSwapDeploymentsRequest(string projectName, string apiVersion, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments/swap", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
