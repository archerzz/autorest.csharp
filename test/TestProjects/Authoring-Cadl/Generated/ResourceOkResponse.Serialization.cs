// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Rest;

namespace Foundations
{
    public partial class ResourceOkResponse : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("statusCode");
            writer.WriteNumberValue(StatusCode);
            writer.WritePropertyName("projectName");
            writer.WriteStringValue(ProjectName);
            writer.WritePropertyName("projectKind");
            writer.WriteObjectValue(ProjectKind);
            writer.WritePropertyName("storageInputContainerName");
            writer.WriteStringValue(StorageInputContainerName);
            if (Optional.IsCollectionDefined(Settings))
            {
                writer.WritePropertyName("settings");
                writer.WriteStartObject();
                foreach (var item in Settings)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(Multilingual))
            {
                if (Multilingual != null)
                {
                    writer.WritePropertyName("multilingual");
                    writer.WriteBooleanValue(Multilingual.Value);
                }
                else
                {
                    writer.WriteNull("multilingual");
                }
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("language");
            writer.WriteStringValue(Language);
            writer.WritePropertyName("operationLocation");
            writer.WriteObjectValue(OperationLocation);
            writer.WriteEndObject();
        }

        internal static ResourceOkResponse DeserializeResourceOkResponse(JsonElement element)
        {
            int statusCode = default;
            string projectName = default;
            object projectKind = default;
            string storageInputContainerName = default;
            Optional<IDictionary<string, string>> settings = default;
            Optional<bool?> multilingual = default;
            Optional<string> description = default;
            string language = default;
            DateTimeOffset createdDateTime = default;
            DateTimeOffset lastModifiedDateTime = default;
            DateTimeOffset lastTrainedDateTime = default;
            DateTimeOffset lastDeployedDateTime = default;
            ResourceLocation operationLocation = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("statusCode"))
                {
                    statusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("projectName"))
                {
                    projectName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("projectKind"))
                {
                    projectKind = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("storageInputContainerName"))
                {
                    storageInputContainerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("settings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    settings = dictionary;
                    continue;
                }
                if (property.NameEquals("multilingual"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        multilingual = null;
                        continue;
                    }
                    multilingual = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("language"))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"))
                {
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedDateTime"))
                {
                    lastModifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTrainedDateTime"))
                {
                    lastTrainedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastDeployedDateTime"))
                {
                    lastDeployedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("operationLocation"))
                {
                    operationLocation = ResourceLocation.DeserializeResourceLocation(property.Value);
                    continue;
                }
            }
            return new ResourceOkResponse(statusCode, projectName, projectKind, storageInputContainerName, Optional.ToDictionary(settings), Optional.ToNullable(multilingual), description, language, createdDateTime, lastModifiedDateTime, lastTrainedDateTime, lastDeployedDateTime, operationLocation);
        }

        internal RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }

        internal static ResourceOkResponse FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeResourceOkResponse(document.RootElement);
        }
    }
}
