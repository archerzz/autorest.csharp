// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Authoring;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Foundations;

namespace Azure.Language.Authoring
{
    // Data plane generated client. The Projects service client.
    /// <summary> The Projects service client. </summary>
    public partial class ProjectsClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ProjectsClient for mocking. </summary>
        protected ProjectsClient()
        {
        }

        /// <summary> Initializes a new instance of ProjectsClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ProjectsClient(Uri endpoint) : this(endpoint, new AuthoringClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ProjectsClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public ProjectsClient(Uri endpoint, AuthoringClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthoringClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Creates a new project or updates an existing one. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(projectName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new project or updates an existing one. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.CreateOrUpdate("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(projectName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<ResourceOkResponse>> GetValueAsync(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.GetValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetAsync(projectName, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<ResourceOkResponse> GetValue(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.GetValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = Get(projectName, apiVersion, context);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.GetAsync("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAsync(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(projectName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the details of a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Get with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.Get("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Get(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(projectName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<AcceptedResponse>> DeleteValueAsync(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.DeleteValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await DeleteAsync(projectName, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(AcceptedResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<AcceptedResponse> DeleteValue(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.DeleteValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = Delete(projectName, apiVersion, context);
                return Response.FromValue(AcceptedResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.DeleteAsync("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AcceptedResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   id: string, # Optional.
        ///   status: &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        ///   operationLocation: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteAsync(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(projectName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.Delete("<projectName>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>AcceptedResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   id: string, # Optional.
        ///   status: &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        ///   operationLocation: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Delete(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(projectName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing projects. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<ResourceOkResponse>> ListValueAsync(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.ListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ListAsync(apiVersion, top, skip, maxpagesize, context).ConfigureAwait(false);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing projects. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<ResourceOkResponse> ListValue(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.ListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = List(apiVersion, top, skip, maxpagesize, context);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing projects. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ListAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.ListAsync("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call ListAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.ListAsync("<apiVersion>", 1234, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ListAsync(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.List");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListRequest(apiVersion, top, skip, maxpagesize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the existing projects. </summary>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call List with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.List("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call List with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.List("<apiVersion>", 1234, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response List(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.List");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListRequest(apiVersion, top, skip, maxpagesize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="projectFileVersion"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="projectFileVersion"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response> ExportValueAsync(string projectName, string projectFileVersion, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(projectFileVersion, nameof(projectFileVersion));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.ExportValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ExportAsync(projectName, projectFileVersion, apiVersion, context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="projectFileVersion"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="projectFileVersion"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response ExportValue(string projectName, string projectFileVersion, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(projectFileVersion, nameof(projectFileVersion));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.ExportValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = Export(projectName, projectFileVersion, apiVersion, context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="projectFileVersion"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="projectFileVersion"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExportAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.ExportAsync("<projectName>", "<projectFileVersion>", "<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ExportAsync(string projectName, string projectFileVersion, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(projectFileVersion, nameof(projectFileVersion));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Export");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExportRequest(projectName, projectFileVersion, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="projectFileVersion"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="projectFileVersion"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Export with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.Export("<projectName>", "<projectFileVersion>", "<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Export(string projectName, string projectFileVersion, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(projectFileVersion, nameof(projectFileVersion));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Export");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExportRequest(projectName, projectFileVersion, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response> ImportxValueAsync(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.ImportxValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ImportxAsync(projectName, apiVersion, context).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response ImportxValue(string projectName, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.ImportxValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = Importx(projectName, apiVersion, context);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ImportxAsync with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = await client.ImportxAsync("<projectName>", "<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> ImportxAsync(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Importx");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportxRequest(projectName, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a job to export a project&apos;s data. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Importx with required parameters.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// Response response = client.Importx("<projectName>", "<apiVersion>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Importx(string projectName, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Importx");
            scope.Start();
            try
            {
                using HttpMessage message = CreateImportxRequest(projectName, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a training job for a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="body"> The TrainingJobOptions to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="body"/> is null. </exception>
        public virtual async Task<Response> TrainAsync(string projectName, string apiVersion, TrainingJobOptions body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await TrainAsync(projectName, apiVersion, body.ToRequestContent(), context).ConfigureAwait(false);
            return response;
        }

        /// <summary> Triggers a training job for a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="body"> The TrainingJobOptions to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="body"/> is null. </exception>
        public virtual Response Train(string projectName, string apiVersion, TrainingJobOptions body, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(body, nameof(body));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = Train(projectName, apiVersion, body.ToRequestContent(), context);
            return response;
        }

        /// <summary> Triggers a training job for a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call TrainAsync with required parameters and request content.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// var data = new {
        ///     modelLabel = "<modelLabel>",
        /// };
        /// 
        /// Response response = await client.TrainAsync("<projectName>", "<apiVersion>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TrainingJobOptions</c>:
        /// <code>{
        ///   modelLabel: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> TrainAsync(string projectName, string apiVersion, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Train");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTrainRequest(projectName, apiVersion, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a training job for a project. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="apiVersion"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Train with required parameters and request content.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ProjectsClient(endpoint);
        /// 
        /// var data = new {
        ///     modelLabel = "<modelLabel>",
        /// };
        /// 
        /// Response response = client.Train("<projectName>", "<apiVersion>", RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TrainingJobOptions</c>:
        /// <code>{
        ///   modelLabel: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Train(string projectName, string apiVersion, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ProjectsClient.Train");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTrainRequest(projectName, apiVersion, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string projectName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetRequest(string projectName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string projectName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateListRequest(string apiVersion, int? top, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects", false);
            uri.AppendQuery("api-version", apiVersion, false);
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, false);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, false);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateExportRequest(string projectName, string projectFileVersion, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath(":export", false);
            uri.AppendQuery("projectFileVersion", projectFileVersion, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateImportxRequest(string projectName, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath(":importx", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateTrainRequest(string projectName, string apiVersion, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath(":train", false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            request.Content = content;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
