// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Authoring;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Language.Authoring
{
    // Data plane generated client. The Global service client.
    /// <summary> The Global service client. </summary>
    public partial class GlobalClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of GlobalClient for mocking. </summary>
        protected GlobalClient()
        {
        }

        /// <summary> Initializes a new instance of GlobalClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public GlobalClient(Uri endpoint) : this(endpoint, new AuthoringClientOptions())
        {
        }

        /// <summary> Initializes a new instance of GlobalClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public GlobalClient(Uri endpoint, AuthoringClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthoringClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<PagedSupportedLanguage>> GetSupportedLanguageValuesAsync(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.GetSupportedLanguageValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetSupportedLanguagesAsync(apiVersion, top, skip, maxpagesize, context).ConfigureAwait(false);
                return Response.FromValue(PagedSupportedLanguage.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<PagedSupportedLanguage> GetSupportedLanguageValues(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.GetSupportedLanguageValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetSupportedLanguages(apiVersion, top, skip, maxpagesize, context);
                return Response.FromValue(PagedSupportedLanguage.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSupportedLanguagesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = await client.GetSupportedLanguagesAsync("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        /// ]]></code>
        /// This sample shows how to call GetSupportedLanguagesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = await client.GetSupportedLanguagesAsync("<apiVersion>", 1234, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PagedSupportedLanguage</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       languageName: string, # Required.
        ///       languageCode: string, # Required.
        ///     }
        ///   ], # Required.
        ///   nextLink: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSupportedLanguagesAsync(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.GetSupportedLanguages");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSupportedLanguagesRequest(apiVersion, top, skip, maxpagesize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSupportedLanguages with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = client.GetSupportedLanguages("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        /// ]]></code>
        /// This sample shows how to call GetSupportedLanguages with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = client.GetSupportedLanguages("<apiVersion>", 1234, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageName").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("languageCode").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PagedSupportedLanguage</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       languageName: string, # Required.
        ///       languageCode: string, # Required.
        ///     }
        ///   ], # Required.
        ///   nextLink: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSupportedLanguages(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.GetSupportedLanguages");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSupportedLanguagesRequest(apiVersion, top, skip, maxpagesize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<PagedTrainingConfigVersion>> ListTrainingConfigVersionValuesAsync(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.ListTrainingConfigVersionValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ListTrainingConfigVersionsAsync(apiVersion, top, skip, maxpagesize, context).ConfigureAwait(false);
                return Response.FromValue(PagedTrainingConfigVersion.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<PagedTrainingConfigVersion> ListTrainingConfigVersionValues(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.ListTrainingConfigVersionValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = ListTrainingConfigVersions(apiVersion, top, skip, maxpagesize, context);
                return Response.FromValue(PagedTrainingConfigVersion.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ListTrainingConfigVersionsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = await client.ListTrainingConfigVersionsAsync("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        /// ]]></code>
        /// This sample shows how to call ListTrainingConfigVersionsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = await client.ListTrainingConfigVersionsAsync("<apiVersion>", 1234, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PagedTrainingConfigVersion</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       trainingConfigVersion: string, # Required.
        ///       modelExpirationDate: string (date &amp; time), # Required.
        ///     }
        ///   ], # Required.
        ///   nextLink: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ListTrainingConfigVersionsAsync(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.ListTrainingConfigVersions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListTrainingConfigVersionsRequest(apiVersion, top, skip, maxpagesize, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="top"> The Int32 to use. </param>
        /// <param name="skip"> The Int32 to use. </param>
        /// <param name="maxpagesize"> The Int32 to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ListTrainingConfigVersions with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = client.ListTrainingConfigVersions("<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        /// ]]></code>
        /// This sample shows how to call ListTrainingConfigVersions with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new GlobalClient(endpoint);
        /// 
        /// Response response = client.ListTrainingConfigVersions("<apiVersion>", 1234, 1234, 1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("trainingConfigVersion").ToString());
        /// Console.WriteLine(result.GetProperty("value")[0].GetProperty("modelExpirationDate").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PagedTrainingConfigVersion</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       trainingConfigVersion: string, # Required.
        ///       modelExpirationDate: string (date &amp; time), # Required.
        ///     }
        ///   ], # Required.
        ///   nextLink: {
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response ListTrainingConfigVersions(string apiVersion, int? top = null, int? skip = null, int? maxpagesize = null, RequestContext context = null)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("GlobalClient.ListTrainingConfigVersions");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListTrainingConfigVersionsRequest(apiVersion, top, skip, maxpagesize, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetSupportedLanguagesRequest(string apiVersion, int? top, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/global/languages", false);
            uri.AppendQuery("api-version", apiVersion, false);
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, false);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, false);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, false);
            }
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateListTrainingConfigVersionsRequest(string apiVersion, int? top, int? skip, int? maxpagesize, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/global/training-config-versions", false);
            uri.AppendQuery("api-version", apiVersion, false);
            if (top != null)
            {
                uri.AppendQuery("top", top.Value, false);
            }
            if (skip != null)
            {
                uri.AppendQuery("skip", skip.Value, false);
            }
            if (maxpagesize != null)
            {
                uri.AppendQuery("maxpagesize", maxpagesize.Value, false);
            }
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
