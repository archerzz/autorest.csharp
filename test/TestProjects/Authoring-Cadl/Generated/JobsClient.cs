// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Foundations;

namespace Azure.Language.Authoring
{
    // Data plane generated client. The Jobs service client.
    /// <summary> The Jobs service client. </summary>
    public partial class JobsClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of JobsClient for mocking. </summary>
        protected JobsClient()
        {
        }

        /// <summary> Initializes a new instance of JobsClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public JobsClient(Uri endpoint) : this(endpoint, new AuthoringClientOptions())
        {
        }

        /// <summary> Initializes a new instance of JobsClient. </summary>
        /// <param name="endpoint"> The Uri to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public JobsClient(Uri endpoint, AuthoringClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new AuthoringClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Gets the status of an existing deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<ResourceOkResponse>> GetDeploymentStatusValueAsync(string projectName, string deploymentName, string jobId, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetDeploymentStatusValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetDeploymentStatusAsync(projectName, deploymentName, jobId, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<ResourceOkResponse> GetDeploymentStatusValue(string projectName, string deploymentName, string jobId, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetDeploymentStatusValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetDeploymentStatus(projectName, deploymentName, jobId, apiVersion, context);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDeploymentStatusAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new JobsClient(endpoint);
        /// 
        /// Response response = await client.GetDeploymentStatusAsync("<projectName>", "<deploymentName>", "<jobId>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDeploymentStatusAsync(string projectName, string deploymentName, string jobId, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentStatusRequest(projectName, deploymentName, jobId, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDeploymentStatus with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new JobsClient(endpoint);
        /// 
        /// Response response = client.GetDeploymentStatus("<projectName>", "<deploymentName>", "<jobId>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDeploymentStatus(string projectName, string deploymentName, string jobId, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetDeploymentStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDeploymentStatusRequest(projectName, deploymentName, jobId, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing swap deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual async Task<Response<ResourceOkResponse>> GetSwapDeploymentsStatusValueAsync(string projectName, string deploymentName, string jobId, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetSwapDeploymentsStatusValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetSwapDeploymentsStatusAsync(projectName, deploymentName, jobId, apiVersion, context).ConfigureAwait(false);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing swap deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        public virtual Response<ResourceOkResponse> GetSwapDeploymentsStatusValue(string projectName, string deploymentName, string jobId, string apiVersion, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetSwapDeploymentsStatusValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetSwapDeploymentsStatus(projectName, deploymentName, jobId, apiVersion, context);
                return Response.FromValue(ResourceOkResponse.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing swap deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSwapDeploymentsStatusAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new JobsClient(endpoint);
        /// 
        /// Response response = await client.GetSwapDeploymentsStatusAsync("<projectName>", "<deploymentName>", "<jobId>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSwapDeploymentsStatusAsync(string projectName, string deploymentName, string jobId, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetSwapDeploymentsStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSwapDeploymentsStatusRequest(projectName, deploymentName, jobId, apiVersion, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of an existing swap deployment job. </summary>
        /// <param name="projectName"> The String to use. </param>
        /// <param name="deploymentName"> The String to use. </param>
        /// <param name="jobId"> The String to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="projectName"/>, <paramref name="deploymentName"/>, <paramref name="jobId"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSwapDeploymentsStatus with required parameters and parse the result.
        /// <code><![CDATA[
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new JobsClient(endpoint);
        /// 
        /// Response response = client.GetSwapDeploymentsStatus("<projectName>", "<deploymentName>", "<jobId>", "<apiVersion>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("statusCode").ToString());
        /// Console.WriteLine(result.GetProperty("projectName").ToString());
        /// Console.WriteLine(result.GetProperty("storageInputContainerName").ToString());
        /// Console.WriteLine(result.GetProperty("settings").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("multilingual").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("language").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastTrainedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastDeployedDateTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ResourceOkResponse</c>:
        /// <code>{
        ///   statusCode: number, # Required.
        ///   projectName: string, # Required.
        ///   projectKind: {
        ///   }, # Required.
        ///   storageInputContainerName: string, # Required.
        ///   settings: Dictionary&lt;string, string&gt;, # Optional.
        ///   multilingual: boolean, # Optional.
        ///   description: string, # Optional.
        ///   language: string, # Required.
        ///   createdDateTime: string (date &amp; time), # Required.
        ///   lastModifiedDateTime: string (date &amp; time), # Required.
        ///   lastTrainedDateTime: string (date &amp; time), # Required.
        ///   lastDeployedDateTime: string (date &amp; time), # Required.
        ///   operationLocation: {
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSwapDeploymentsStatus(string projectName, string deploymentName, string jobId, string apiVersion, RequestContext context = null)
        {
            Argument.AssertNotNull(projectName, nameof(projectName));
            Argument.AssertNotNull(deploymentName, nameof(deploymentName));
            Argument.AssertNotNull(jobId, nameof(jobId));
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));

            using var scope = ClientDiagnostics.CreateScope("JobsClient.GetSwapDeploymentsStatus");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSwapDeploymentsStatusRequest(projectName, deploymentName, jobId, apiVersion, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetDeploymentStatusRequest(string projectName, string deploymentName, string jobId, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentName, false);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateGetSwapDeploymentsStatusRequest(string projectName, string deploymentName, string jobId, string apiVersion, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRaw("/language", false);
            uri.AppendPath("/authoring/analyze-text/projects/", false);
            uri.AppendPath(projectName, false);
            uri.AppendPath("/deployments/", false);
            uri.AppendPath(deploymentName, false);
            uri.AppendPath("/swap/jobs/", false);
            uri.AppendPath(jobId, false);
            uri.AppendQuery("api-version", apiVersion, false);
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
