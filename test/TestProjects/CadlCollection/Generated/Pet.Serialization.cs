// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace CadlCollection
{
    public partial class Pet : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("age");
            writer.WriteNumberValue(Age);
            writer.WritePropertyName("names");
            writer.WriteStartArray();
            foreach (var item in Names)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("ages");
            writer.WriteStartArray();
            foreach (var item in Ages)
            {
                writer.WriteNumberValue(item);
            }
            writer.WriteEndArray();
            writer.WritePropertyName("species");
            writer.WriteStartArray();
            foreach (var item in Species)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static Pet DeserializePet(JsonElement element)
        {
            string name = default;
            int age = default;
            IList<string> names = default;
            IList<int> ages = default;
            IList<Specy> species = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("age"))
                {
                    age = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("names"))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    names = array;
                    continue;
                }
                if (property.NameEquals("ages"))
                {
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    ages = array;
                    continue;
                }
                if (property.NameEquals("species"))
                {
                    List<Specy> array = new List<Specy>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Specy.DeserializeSpecy(item));
                    }
                    species = array;
                    continue;
                }
            }
            return new Pet(name, age, names, ages, species);
        }

        internal RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }

        internal static Pet FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializePet(document.RootElement);
        }
    }
}
