// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace CadlCollection
{
    /// <summary> Illustrates input, output, and round-trip models with required enum type properties. </summary>
    public partial class ArrayBasicClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ArrayBasicClient for mocking. </summary>
        protected ArrayBasicClient()
        {
        }

        /// <summary> Initializes a new instance of ArrayBasicClient. </summary>
        /// <param name="apiVersion"> The String to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public ArrayBasicClient(string apiVersion) : this(apiVersion, new ArrayBasicClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ArrayBasicClient. </summary>
        /// <param name="apiVersion"> The String to use. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public ArrayBasicClient(string apiVersion, ArrayBasicClientOptions options)
        {
            Argument.AssertNotNull(apiVersion, nameof(apiVersion));
            options ??= new ArrayBasicClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Manage your pets. </summary>
        /// <param name="nextLink"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Manage your pets. You can delete or get the Pet from pet store. </remarks>
        public virtual async Task<Response<Array>> ListValueAsync(string nextLink = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayBasicClient.ListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await ListAsync(nextLink, context).ConfigureAwait(false);
                return Response.FromValue(Array.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Manage your pets. </summary>
        /// <param name="nextLink"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks> Manage your pets. You can delete or get the Pet from pet store. </remarks>
        public virtual Response<Array> ListValue(string nextLink = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayBasicClient.ListValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = List(nextLink, context);
                return Response.FromValue(Array.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Manage your pets. </summary>
        /// <param name="nextLink"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call ListAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new ArrayBasicClient("<apiVersion>");
        /// 
        /// Response response = await client.ListAsync();
        /// 
        /// Console.WriteLine(response.ToString());
        /// ]]></code>
        /// This sample shows how to call ListAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ArrayBasicClient("<apiVersion>");
        /// 
        /// Response response = await client.ListAsync("<nextLink>");
        /// 
        /// Console.WriteLine(response.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Manage your pets. You can delete or get the Pet from pet store.
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Array</c>:
        /// <code>{
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ListAsync(string nextLink = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayBasicClient.List");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListRequest(nextLink, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Manage your pets. </summary>
        /// <param name="nextLink"> The String to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call List and parse the result.
        /// <code><![CDATA[
        /// var client = new ArrayBasicClient("<apiVersion>");
        /// 
        /// Response response = client.List();
        /// 
        /// Console.WriteLine(response.ToString());
        /// ]]></code>
        /// This sample shows how to call List with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new ArrayBasicClient("<apiVersion>");
        /// 
        /// Response response = client.List("<nextLink>");
        /// 
        /// Console.WriteLine(response.ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Manage your pets. You can delete or get the Pet from pet store.
        /// 
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Array</c>:
        /// <code>{
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response List(string nextLink = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ArrayBasicClient.List");
            scope.Start();
            try
            {
                using HttpMessage message = CreateListRequest(nextLink, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateListRequest(string nextLink, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            message.BufferResponse = false;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/pets", false);
            uri.AppendQuery("apiVersion", _apiVersion, true);
            if (nextLink != null)
            {
                uri.AppendQuery("nextLink", nextLink, false);
            }
            request.Uri = uri;
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
