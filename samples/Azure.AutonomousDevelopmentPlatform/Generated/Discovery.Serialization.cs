// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace ADP.DataManagement.Ingestion.Discoveries
{
    public partial class Discovery : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("discoveryId");
            writer.WriteStringValue(DiscoveryId);
            if (Optional.IsDefined(ExternalPackageId))
            {
                writer.WritePropertyName("externalPackageId");
                writer.WriteStringValue(ExternalPackageId);
            }
            writer.WritePropertyName("manifestUploadUri");
            writer.WriteStringValue(ManifestUploadUri);
            writer.WritePropertyName("status");
            writer.WriteStringValue(Status.ToString());
            writer.WriteEndObject();
        }

        internal static Discovery DeserializeDiscovery(JsonElement element)
        {
            string discoveryId = default;
            Optional<string> externalPackageId = default;
            string manifestUploadUri = default;
            DiscoveryStatus status = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("discoveryId"))
                {
                    discoveryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("externalPackageId"))
                {
                    externalPackageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("manifestUploadUri"))
                {
                    manifestUploadUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = new DiscoveryStatus(property.Value.GetString());
                    continue;
                }
            }
            return new Discovery(discoveryId, externalPackageId, manifestUploadUri, status);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Discovery FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDiscovery(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
