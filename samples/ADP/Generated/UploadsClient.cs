// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace ADP
{
    // Data plane generated client. The Uploads service client.
    /// <summary> The Uploads service client. </summary>
    public partial class UploadsClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of UploadsClient. </summary>
        public UploadsClient() : this(new ADPClientOptions())
        {
        }

        /// <summary> Initializes a new instance of UploadsClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public UploadsClient(ADPClientOptions options)
        {
            options ??= new ADPClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Creates a new ingestion upload instance. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrReplaceAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var data = new {
        ///     manifestUploadUri = "<manifestUploadUri>",
        ///     status = "Created",
        ///     resourceEndpoint = "<resourceEndpoint>",
        /// };
        /// 
        /// Response response = await client.CreateOrReplaceAsync("<uploadId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifestUploadUri").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resourceEndpoint").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrReplaceAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var data = new {
        ///     externalPackageId = "<externalPackageId>",
        ///     discoveryId = "<discoveryId>",
        ///     manifestUploadUri = "<manifestUploadUri>",
        ///     status = "Created",
        ///     resourceEndpoint = "<resourceEndpoint>",
        /// };
        /// 
        /// Response response = await client.CreateOrReplaceAsync("<uploadId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("externalPackageId").ToString());
        /// Console.WriteLine(result.GetProperty("discoveryId").ToString());
        /// Console.WriteLine(result.GetProperty("manifestUploadUri").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resourceEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Upload</c>:
        /// <code>{
        ///   externalPackageId: string, # Optional.
        ///   discoveryId: string, # Optional.
        ///   manifestUploadUri: string, # Required.
        ///   status: &quot;Created&quot; | &quot;GeneratingSpecialFilesUploadInfo&quot; | &quot;GeneratedSpecialFilesUploadInfo&quot; | &quot;GeneratingDataFilesUploadInfo&quot; | &quot;GeneratedDataFilesUploadInfo&quot; | &quot;Completing&quot; | &quot;Completed&quot; | &quot;Aborting&quot; | &quot;Aborted&quot; | &quot;Failed&quot;, # Required.
        ///   resourceEndpoint: string, # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Upload</c>:
        /// <code>{
        ///   externalPackageId: string, # Optional.
        ///   discoveryId: string, # Optional.
        ///   manifestUploadUri: string, # Required.
        ///   status: &quot;Created&quot; | &quot;GeneratingSpecialFilesUploadInfo&quot; | &quot;GeneratedSpecialFilesUploadInfo&quot; | &quot;GeneratingDataFilesUploadInfo&quot; | &quot;GeneratedDataFilesUploadInfo&quot; | &quot;Completing&quot; | &quot;Completed&quot; | &quot;Aborting&quot; | &quot;Aborted&quot; | &quot;Failed&quot;, # Required.
        ///   resourceEndpoint: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrReplaceAsync(string uploadId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.CreateOrReplace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrReplaceRequest(uploadId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new ingestion upload instance. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrReplace with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var data = new {
        ///     manifestUploadUri = "<manifestUploadUri>",
        ///     status = "Created",
        ///     resourceEndpoint = "<resourceEndpoint>",
        /// };
        /// 
        /// Response response = client.CreateOrReplace("<uploadId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("manifestUploadUri").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resourceEndpoint").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrReplace with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var data = new {
        ///     externalPackageId = "<externalPackageId>",
        ///     discoveryId = "<discoveryId>",
        ///     manifestUploadUri = "<manifestUploadUri>",
        ///     status = "Created",
        ///     resourceEndpoint = "<resourceEndpoint>",
        /// };
        /// 
        /// Response response = client.CreateOrReplace("<uploadId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("externalPackageId").ToString());
        /// Console.WriteLine(result.GetProperty("discoveryId").ToString());
        /// Console.WriteLine(result.GetProperty("manifestUploadUri").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resourceEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Upload</c>:
        /// <code>{
        ///   externalPackageId: string, # Optional.
        ///   discoveryId: string, # Optional.
        ///   manifestUploadUri: string, # Required.
        ///   status: &quot;Created&quot; | &quot;GeneratingSpecialFilesUploadInfo&quot; | &quot;GeneratedSpecialFilesUploadInfo&quot; | &quot;GeneratingDataFilesUploadInfo&quot; | &quot;GeneratedDataFilesUploadInfo&quot; | &quot;Completing&quot; | &quot;Completed&quot; | &quot;Aborting&quot; | &quot;Aborted&quot; | &quot;Failed&quot;, # Required.
        ///   resourceEndpoint: string, # Required.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Upload</c>:
        /// <code>{
        ///   externalPackageId: string, # Optional.
        ///   discoveryId: string, # Optional.
        ///   manifestUploadUri: string, # Required.
        ///   status: &quot;Created&quot; | &quot;GeneratingSpecialFilesUploadInfo&quot; | &quot;GeneratedSpecialFilesUploadInfo&quot; | &quot;GeneratingDataFilesUploadInfo&quot; | &quot;GeneratedDataFilesUploadInfo&quot; | &quot;Completing&quot; | &quot;Completed&quot; | &quot;Aborting&quot; | &quot;Aborted&quot; | &quot;Failed&quot;, # Required.
        ///   resourceEndpoint: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrReplace(string uploadId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.CreateOrReplace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrReplaceRequest(uploadId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get discovery by ID. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// Response response = await client.GetAsync("<uploadId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("externalPackageId").ToString());
        /// Console.WriteLine(result.GetProperty("discoveryId").ToString());
        /// Console.WriteLine(result.GetProperty("manifestUploadUri").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resourceEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Upload</c>:
        /// <code>{
        ///   externalPackageId: string, # Optional.
        ///   discoveryId: string, # Optional.
        ///   manifestUploadUri: string, # Required.
        ///   status: &quot;Created&quot; | &quot;GeneratingSpecialFilesUploadInfo&quot; | &quot;GeneratedSpecialFilesUploadInfo&quot; | &quot;GeneratingDataFilesUploadInfo&quot; | &quot;GeneratedDataFilesUploadInfo&quot; | &quot;Completing&quot; | &quot;Completed&quot; | &quot;Aborting&quot; | &quot;Aborted&quot; | &quot;Failed&quot;, # Required.
        ///   resourceEndpoint: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAsync(string uploadId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(uploadId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get discovery by ID. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Get with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// Response response = client.Get("<uploadId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("externalPackageId").ToString());
        /// Console.WriteLine(result.GetProperty("discoveryId").ToString());
        /// Console.WriteLine(result.GetProperty("manifestUploadUri").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("resourceEndpoint").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Upload</c>:
        /// <code>{
        ///   externalPackageId: string, # Optional.
        ///   discoveryId: string, # Optional.
        ///   manifestUploadUri: string, # Required.
        ///   status: &quot;Created&quot; | &quot;GeneratingSpecialFilesUploadInfo&quot; | &quot;GeneratedSpecialFilesUploadInfo&quot; | &quot;GeneratingDataFilesUploadInfo&quot; | &quot;GeneratedDataFilesUploadInfo&quot; | &quot;Completing&quot; | &quot;Completed&quot; | &quot;Aborting&quot; | &quot;Aborted&quot; | &quot;Failed&quot;, # Required.
        ///   resourceEndpoint: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Get(string uploadId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(uploadId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of generating SAS signed URIs for uploading special files for the upload. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GenerateSpecialFilesUploadInfoAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.GenerateSpecialFilesUploadInfoAsync(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call GenerateSpecialFilesUploadInfoAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.GenerateSpecialFilesUploadInfoAsync(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> GenerateSpecialFilesUploadInfoAsync(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.GenerateSpecialFilesUploadInfo");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGenerateSpecialFilesUploadInfoRequest(uploadId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "UploadsClient.GenerateSpecialFilesUploadInfo", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of generating SAS signed URIs for uploading special files for the upload. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GenerateSpecialFilesUploadInfo with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.GenerateSpecialFilesUploadInfo(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call GenerateSpecialFilesUploadInfo with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.GenerateSpecialFilesUploadInfo(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> GenerateSpecialFilesUploadInfo(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.GenerateSpecialFilesUploadInfo");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGenerateSpecialFilesUploadInfoRequest(uploadId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "UploadsClient.GenerateSpecialFilesUploadInfo", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of sharding the data files. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GenerateDataFilesUploadInfoAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.GenerateDataFilesUploadInfoAsync(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call GenerateDataFilesUploadInfoAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.GenerateDataFilesUploadInfoAsync(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> GenerateDataFilesUploadInfoAsync(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.GenerateDataFilesUploadInfo");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGenerateDataFilesUploadInfoRequest(uploadId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "UploadsClient.GenerateDataFilesUploadInfo", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of sharding the data files. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GenerateDataFilesUploadInfo with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.GenerateDataFilesUploadInfo(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call GenerateDataFilesUploadInfo with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.GenerateDataFilesUploadInfo(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> GenerateDataFilesUploadInfo(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.GenerateDataFilesUploadInfo");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGenerateDataFilesUploadInfoRequest(uploadId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "UploadsClient.GenerateDataFilesUploadInfo", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of completing the upload and creating the measurements. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CompleteAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.CompleteAsync(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call CompleteAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.CompleteAsync(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CompleteAsync(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Complete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteRequest(uploadId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "UploadsClient.Complete", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of completing the upload and creating the measurements. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Complete with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.Complete(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call Complete with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.Complete(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> Complete(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Complete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteRequest(uploadId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "UploadsClient.Complete", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of cancelling the upload. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CancelAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.CancelAsync(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call CancelAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = await client.CancelAsync(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CancelAsync(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Cancel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelRequest(uploadId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "UploadsClient.Cancel", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of cancelling the upload. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Usually UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call Cancel with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.Cancel(WaitUntil.Completed, "<uploadId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// ]]></code>
        /// This sample shows how to call Cancel with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new UploadsClient();
        /// 
        /// var operation = client.Cancel(WaitUntil.Completed, "<uploadId>", "<operationId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("operationId").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("operationType").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
        /// Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>UploadLroResponse</c>:
        /// <code>{
        ///   operationId: string, # Required.
        ///   status: &quot;Created&quot; | &quot;InProgress&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Canceled&quot;, # Required.
        ///   operationType: &quot;FinalizeFileList&quot; | &quot;ShardFiles&quot; | &quot;CompleteUpload&quot; | &quot;AbortUpload&quot;, # Optional.
        ///   error: {
        ///     code: string, # Required.
        ///     message: string, # Required.
        ///     target: string, # Optional.
        ///     details: [Error], # Required.
        ///     innererror: {
        ///       code: string, # Required.
        ///       innererror: InnerError, # Optional.
        ///     }, # Optional.
        ///   }, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> Cancel(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Cancel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelRequest(uploadId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "UploadsClient.Cancel", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrReplaceRequest(string uploadId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRequest(string uploadId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGenerateSpecialFilesUploadInfoRequest(string uploadId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendPath(":generateSpecialFilesUploadInfo", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("Operation-Id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGenerateDataFilesUploadInfoRequest(string uploadId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendPath(":generateDataFilesUploadInfo", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("Operation-Id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCompleteRequest(string uploadId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendPath(":complete", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("Operation-Id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelRequest(string uploadId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendPath(":cancel", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("Operation-Id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
