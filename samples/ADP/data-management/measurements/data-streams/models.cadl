import "@cadl-lang/rest";

using Cadl.Http;
using Cadl.Rest;

namespace ADP.DataManagement.Measurements.DataStreams {
  enum Clients {
    DataStreamClient,
  }

  @doc("A data-stream resource")
  @resource("dataStreams")
  @parentResource(Measurement)
  model DataStream {
    @doc("The data stream identifier")
    @key
    dataStreamId: string;
    ...CommonResourceEndpoint;

    @doc("The data stream lineage information")
    @visibility("read", "write", "update")
    lineage: DataStreamLineage;

    @doc("The data stream list of tags")
    @visibility("read", "write", "update")
    tags: string[];

    @doc("The data stream status")
    status: DataStreamStatus;

    @doc("The data stream type")
    type: DataStreamType;

    @doc("The data stream rolling information")
    @visibility("read")
    rollingInformation?: DataStreamRollingInformation | null;

    @doc("""
    SAS signed URI for downloading the data stream manifest file from Azure Storage.
    This URI expires in 24 hours.
    """)
    @format("uri")
    @visibility("read")
    dataStreamManifestFileUri?: string;

    @doc("The list of shards associated with the data stream")
    @visibility("read")
    shards?: DataStreamShardAccessInformation[] | null;
  }

  @doc("A wrapper for the list of data streams")
  @withOptionalProperties
  model DataStreamListResponse {
    @doc("Collection of the data stream's channels")
    @visibility("read")
    dataStreams: DataStream[];
  }

  @doc("Graph of matched data streams by processing objects graph")
  @withOptionalProperties
  model DataStreamsGraph {
    @doc("Dictionary of data stream by processing object id")
    dataStreamByProcessingObjectId: Record<DataStream>;
  }

  @doc("List of graphs of matched data streams by processing objects graph")
  @withOptionalProperties
  model DataStreamsGraphListResponse {
    @doc("List of data streams matched graphs")
    dataStreamsGraphs: DataStreamsGraph[];
  }

  @doc("Data stream search by type query parameters")
  @withOptionalProperties
  model FindDataStreamByTypeRequestParameters {
    @doc("The data-stream type to search for")
    type: DataStreamType;
  }

  model FindDataStreamByTypeRequestCustomizations {
    parameters: FindDataStreamByTypeRequestParameters;
    response: {};
  }

  @doc("Data stream search by lineage query parameters")
  @withOptionalProperties
  model FindDataStreamByLineageRequestParameters {
    @doc("The data-stream lineage to search for")
    lineage: DataStreamLineage;
  }

  model FindDataStreamByLineageRequestCustomizations {
    parameters: FindDataStreamByLineageRequestParameters;
    response: {};
  }

  @doc("Data stream search by tags parameters")
  @withOptionalProperties
  model FindDataStreamByTagsRequestParameters {
    @doc("The list of tags to search for")
    tags: string[];
  }

  model FindDataStreamByTagsRequestCustomizations {
    parameters: FindDataStreamByLineageRequestParameters;
    response: {};
  }

  @doc("Data stream lineage information")
  @withOptionalProperties
  model DataStreamLineage {
    @doc("The data stream's metadata")
    @visibility("read", "write")
    producerMetadata: Record<string>;

    @doc("The data stream's inputs")
    @visibility("read", "write")
    inputs: DataStreamInput[];
  }

  model DataStreamInput {
    @doc("The source data-stream identifier")
    @visibility("read", "write")
    sourceDataStreamId: string;

    @doc("Collection of the data stream's channels")
    @visibility("read", "write")
    channels?: string[];
  }

  @doc("Processing objects graph")
  model FindDataStreamByLineageGraphRequestParameters {
    @doc("The processing objects")
    @visibility("read", "write")
    processingObjects: ProcessingObject[];

    @doc("The processing objects edges")
    @visibility("read", "write")
    edges: ProcessingObjectEdge[];
  }

  model FindDataStreamByLineageGraphRequestCustomizations {
    parameters: FindDataStreamByLineageGraphRequestParameters;
    response: {};
  }

  @doc("Processing object node information in a processing objects Graph")
  model ProcessingObject {
    @doc("The processing object metadata")
    @visibility("read", "write")
    metadata: Record<string> | null;

    @doc("A request unique ID to identify processing objects in graph")
    @visibility("read", "write")
    id: string;
  }

  @doc("Processing objects edge")
  @withOptionalProperties
  model ProcessingObjectEdge {
    @doc("The source processing object ID")
    sourceId: string;

    @doc("The target processing object ID")
    targetId: string;
  }
}
